/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var core_pb = require('./core_pb.js');
goog.exportSymbol('proto.bc.RoverIdent', null, global);
goog.exportSymbol('proto.bc.RoverMessage', null, global);
goog.exportSymbol('proto.bc.RoverMessage.FetchBlock', null, global);
goog.exportSymbol('proto.bc.RoverMessage.Resync', null, global);
goog.exportSymbol('proto.bc.RoverMessage.Resync.Interval', null, global);
goog.exportSymbol('proto.bc.RoverMessageType', null, global);
goog.exportSymbol('proto.bc.RoverSyncStatus', null, global);
goog.exportSymbol('proto.bc.SettleTxCheckReq', null, global);
goog.exportSymbol('proto.bc.SettleTxCheckResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.RoverIdent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.RoverIdent, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bc.RoverIdent.displayName = 'proto.bc.RoverIdent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.RoverIdent.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.RoverIdent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.RoverIdent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.RoverIdent.toObject = function(includeInstance, msg) {
  var f, obj = {
    roverName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.RoverIdent}
 */
proto.bc.RoverIdent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.RoverIdent;
  return proto.bc.RoverIdent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.RoverIdent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.RoverIdent}
 */
proto.bc.RoverIdent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoverName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.RoverIdent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.RoverIdent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.RoverIdent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.RoverIdent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoverName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string rover_name = 1;
 * @return {string}
 */
proto.bc.RoverIdent.prototype.getRoverName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bc.RoverIdent.prototype.setRoverName = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.RoverSyncStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.RoverSyncStatus, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bc.RoverSyncStatus.displayName = 'proto.bc.RoverSyncStatus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.RoverSyncStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.RoverSyncStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.RoverSyncStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.RoverSyncStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    roverName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.RoverSyncStatus}
 */
proto.bc.RoverSyncStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.RoverSyncStatus;
  return proto.bc.RoverSyncStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.RoverSyncStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.RoverSyncStatus}
 */
proto.bc.RoverSyncStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoverName(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.RoverSyncStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.RoverSyncStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.RoverSyncStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.RoverSyncStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoverName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string rover_name = 1;
 * @return {string}
 */
proto.bc.RoverSyncStatus.prototype.getRoverName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bc.RoverSyncStatus.prototype.setRoverName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool status = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bc.RoverSyncStatus.prototype.getStatus = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.bc.RoverSyncStatus.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.RoverMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.bc.RoverMessage.oneofGroups_);
};
goog.inherits(proto.bc.RoverMessage, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bc.RoverMessage.displayName = 'proto.bc.RoverMessage';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.bc.RoverMessage.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.bc.RoverMessage.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  RESYNC: 2,
  FETCH_BLOCK: 3
};

/**
 * @return {proto.bc.RoverMessage.PayloadCase}
 */
proto.bc.RoverMessage.prototype.getPayloadCase = function() {
  return /** @type {proto.bc.RoverMessage.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.bc.RoverMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.RoverMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.RoverMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.RoverMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.RoverMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    resync: (f = msg.getResync()) && proto.bc.RoverMessage.Resync.toObject(includeInstance, f),
    fetchBlock: (f = msg.getFetchBlock()) && proto.bc.RoverMessage.FetchBlock.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.RoverMessage}
 */
proto.bc.RoverMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.RoverMessage;
  return proto.bc.RoverMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.RoverMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.RoverMessage}
 */
proto.bc.RoverMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.bc.RoverMessageType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.bc.RoverMessage.Resync;
      reader.readMessage(value,proto.bc.RoverMessage.Resync.deserializeBinaryFromReader);
      msg.setResync(value);
      break;
    case 3:
      var value = new proto.bc.RoverMessage.FetchBlock;
      reader.readMessage(value,proto.bc.RoverMessage.FetchBlock.deserializeBinaryFromReader);
      msg.setFetchBlock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.RoverMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.RoverMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.RoverMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.RoverMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getResync();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bc.RoverMessage.Resync.serializeBinaryToWriter
    );
  }
  f = message.getFetchBlock();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.bc.RoverMessage.FetchBlock.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.RoverMessage.FetchBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.RoverMessage.FetchBlock, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bc.RoverMessage.FetchBlock.displayName = 'proto.bc.RoverMessage.FetchBlock';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.RoverMessage.FetchBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.RoverMessage.FetchBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.RoverMessage.FetchBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.RoverMessage.FetchBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromBlock: (f = msg.getFromBlock()) && core_pb.Block.toObject(includeInstance, f),
    toBlock: (f = msg.getToBlock()) && core_pb.Block.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.RoverMessage.FetchBlock}
 */
proto.bc.RoverMessage.FetchBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.RoverMessage.FetchBlock;
  return proto.bc.RoverMessage.FetchBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.RoverMessage.FetchBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.RoverMessage.FetchBlock}
 */
proto.bc.RoverMessage.FetchBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_pb.Block;
      reader.readMessage(value,core_pb.Block.deserializeBinaryFromReader);
      msg.setFromBlock(value);
      break;
    case 2:
      var value = new core_pb.Block;
      reader.readMessage(value,core_pb.Block.deserializeBinaryFromReader);
      msg.setToBlock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.RoverMessage.FetchBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.RoverMessage.FetchBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.RoverMessage.FetchBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.RoverMessage.FetchBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromBlock();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_pb.Block.serializeBinaryToWriter
    );
  }
  f = message.getToBlock();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      core_pb.Block.serializeBinaryToWriter
    );
  }
};


/**
 * optional Block from_block = 1;
 * @return {?proto.bc.Block}
 */
proto.bc.RoverMessage.FetchBlock.prototype.getFromBlock = function() {
  return /** @type{?proto.bc.Block} */ (
    jspb.Message.getWrapperField(this, core_pb.Block, 1));
};


/** @param {?proto.bc.Block|undefined} value */
proto.bc.RoverMessage.FetchBlock.prototype.setFromBlock = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bc.RoverMessage.FetchBlock.prototype.clearFromBlock = function() {
  this.setFromBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bc.RoverMessage.FetchBlock.prototype.hasFromBlock = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Block to_block = 2;
 * @return {?proto.bc.Block}
 */
proto.bc.RoverMessage.FetchBlock.prototype.getToBlock = function() {
  return /** @type{?proto.bc.Block} */ (
    jspb.Message.getWrapperField(this, core_pb.Block, 2));
};


/** @param {?proto.bc.Block|undefined} value */
proto.bc.RoverMessage.FetchBlock.prototype.setToBlock = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bc.RoverMessage.FetchBlock.prototype.clearToBlock = function() {
  this.setToBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bc.RoverMessage.FetchBlock.prototype.hasToBlock = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.RoverMessage.Resync = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bc.RoverMessage.Resync.repeatedFields_, null);
};
goog.inherits(proto.bc.RoverMessage.Resync, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bc.RoverMessage.Resync.displayName = 'proto.bc.RoverMessage.Resync';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bc.RoverMessage.Resync.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.RoverMessage.Resync.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.RoverMessage.Resync.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.RoverMessage.Resync} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.RoverMessage.Resync.toObject = function(includeInstance, msg) {
  var f, obj = {
    latestBlock: (f = msg.getLatestBlock()) && core_pb.Block.toObject(includeInstance, f),
    intervalsList: jspb.Message.toObjectList(msg.getIntervalsList(),
    proto.bc.RoverMessage.Resync.Interval.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.RoverMessage.Resync}
 */
proto.bc.RoverMessage.Resync.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.RoverMessage.Resync;
  return proto.bc.RoverMessage.Resync.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.RoverMessage.Resync} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.RoverMessage.Resync}
 */
proto.bc.RoverMessage.Resync.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_pb.Block;
      reader.readMessage(value,core_pb.Block.deserializeBinaryFromReader);
      msg.setLatestBlock(value);
      break;
    case 2:
      var value = new proto.bc.RoverMessage.Resync.Interval;
      reader.readMessage(value,proto.bc.RoverMessage.Resync.Interval.deserializeBinaryFromReader);
      msg.addIntervals(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.RoverMessage.Resync.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.RoverMessage.Resync.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.RoverMessage.Resync} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.RoverMessage.Resync.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLatestBlock();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_pb.Block.serializeBinaryToWriter
    );
  }
  f = message.getIntervalsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.bc.RoverMessage.Resync.Interval.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.RoverMessage.Resync.Interval = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.RoverMessage.Resync.Interval, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bc.RoverMessage.Resync.Interval.displayName = 'proto.bc.RoverMessage.Resync.Interval';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.RoverMessage.Resync.Interval.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.RoverMessage.Resync.Interval.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.RoverMessage.Resync.Interval} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.RoverMessage.Resync.Interval.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromBlock: jspb.Message.getFieldWithDefault(msg, 1, 0),
    toBlock: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.RoverMessage.Resync.Interval}
 */
proto.bc.RoverMessage.Resync.Interval.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.RoverMessage.Resync.Interval;
  return proto.bc.RoverMessage.Resync.Interval.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.RoverMessage.Resync.Interval} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.RoverMessage.Resync.Interval}
 */
proto.bc.RoverMessage.Resync.Interval.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFromBlock(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setToBlock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.RoverMessage.Resync.Interval.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.RoverMessage.Resync.Interval.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.RoverMessage.Resync.Interval} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.RoverMessage.Resync.Interval.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromBlock();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getToBlock();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 from_block = 1;
 * @return {number}
 */
proto.bc.RoverMessage.Resync.Interval.prototype.getFromBlock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.bc.RoverMessage.Resync.Interval.prototype.setFromBlock = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint64 to_block = 2;
 * @return {number}
 */
proto.bc.RoverMessage.Resync.Interval.prototype.getToBlock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.bc.RoverMessage.Resync.Interval.prototype.setToBlock = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional Block latest_block = 1;
 * @return {?proto.bc.Block}
 */
proto.bc.RoverMessage.Resync.prototype.getLatestBlock = function() {
  return /** @type{?proto.bc.Block} */ (
    jspb.Message.getWrapperField(this, core_pb.Block, 1));
};


/** @param {?proto.bc.Block|undefined} value */
proto.bc.RoverMessage.Resync.prototype.setLatestBlock = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bc.RoverMessage.Resync.prototype.clearLatestBlock = function() {
  this.setLatestBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bc.RoverMessage.Resync.prototype.hasLatestBlock = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Interval intervals = 2;
 * @return {!Array.<!proto.bc.RoverMessage.Resync.Interval>}
 */
proto.bc.RoverMessage.Resync.prototype.getIntervalsList = function() {
  return /** @type{!Array.<!proto.bc.RoverMessage.Resync.Interval>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bc.RoverMessage.Resync.Interval, 2));
};


/** @param {!Array.<!proto.bc.RoverMessage.Resync.Interval>} value */
proto.bc.RoverMessage.Resync.prototype.setIntervalsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.bc.RoverMessage.Resync.Interval=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.RoverMessage.Resync.Interval}
 */
proto.bc.RoverMessage.Resync.prototype.addIntervals = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.bc.RoverMessage.Resync.Interval, opt_index);
};


proto.bc.RoverMessage.Resync.prototype.clearIntervalsList = function() {
  this.setIntervalsList([]);
};


/**
 * optional RoverMessageType type = 1;
 * @return {!proto.bc.RoverMessageType}
 */
proto.bc.RoverMessage.prototype.getType = function() {
  return /** @type {!proto.bc.RoverMessageType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.bc.RoverMessageType} value */
proto.bc.RoverMessage.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Resync resync = 2;
 * @return {?proto.bc.RoverMessage.Resync}
 */
proto.bc.RoverMessage.prototype.getResync = function() {
  return /** @type{?proto.bc.RoverMessage.Resync} */ (
    jspb.Message.getWrapperField(this, proto.bc.RoverMessage.Resync, 2));
};


/** @param {?proto.bc.RoverMessage.Resync|undefined} value */
proto.bc.RoverMessage.prototype.setResync = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.bc.RoverMessage.oneofGroups_[0], value);
};


proto.bc.RoverMessage.prototype.clearResync = function() {
  this.setResync(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bc.RoverMessage.prototype.hasResync = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional FetchBlock fetch_block = 3;
 * @return {?proto.bc.RoverMessage.FetchBlock}
 */
proto.bc.RoverMessage.prototype.getFetchBlock = function() {
  return /** @type{?proto.bc.RoverMessage.FetchBlock} */ (
    jspb.Message.getWrapperField(this, proto.bc.RoverMessage.FetchBlock, 3));
};


/** @param {?proto.bc.RoverMessage.FetchBlock|undefined} value */
proto.bc.RoverMessage.prototype.setFetchBlock = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.bc.RoverMessage.oneofGroups_[0], value);
};


proto.bc.RoverMessage.prototype.clearFetchBlock = function() {
  this.setFetchBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bc.RoverMessage.prototype.hasFetchBlock = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.SettleTxCheckReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.SettleTxCheckReq, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bc.SettleTxCheckReq.displayName = 'proto.bc.SettleTxCheckReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.SettleTxCheckReq.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.SettleTxCheckReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.SettleTxCheckReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.SettleTxCheckReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    addrTo: jspb.Message.getFieldWithDefault(msg, 1, ""),
    addrFrom: jspb.Message.getFieldWithDefault(msg, 2, ""),
    bridgedChain: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.SettleTxCheckReq}
 */
proto.bc.SettleTxCheckReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.SettleTxCheckReq;
  return proto.bc.SettleTxCheckReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.SettleTxCheckReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.SettleTxCheckReq}
 */
proto.bc.SettleTxCheckReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddrTo(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddrFrom(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBridgedChain(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.SettleTxCheckReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.SettleTxCheckReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.SettleTxCheckReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.SettleTxCheckReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddrTo();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddrFrom();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBridgedChain();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string addr_to = 1;
 * @return {string}
 */
proto.bc.SettleTxCheckReq.prototype.getAddrTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bc.SettleTxCheckReq.prototype.setAddrTo = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string addr_from = 2;
 * @return {string}
 */
proto.bc.SettleTxCheckReq.prototype.getAddrFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.bc.SettleTxCheckReq.prototype.setAddrFrom = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string bridged_chain = 3;
 * @return {string}
 */
proto.bc.SettleTxCheckReq.prototype.getBridgedChain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.bc.SettleTxCheckReq.prototype.setBridgedChain = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.SettleTxCheckResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.SettleTxCheckResponse, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bc.SettleTxCheckResponse.displayName = 'proto.bc.SettleTxCheckResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.SettleTxCheckResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.SettleTxCheckResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.SettleTxCheckResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.SettleTxCheckResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    isBeforeSettlementHeight: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.SettleTxCheckResponse}
 */
proto.bc.SettleTxCheckResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.SettleTxCheckResponse;
  return proto.bc.SettleTxCheckResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.SettleTxCheckResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.SettleTxCheckResponse}
 */
proto.bc.SettleTxCheckResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsBeforeSettlementHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.SettleTxCheckResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.SettleTxCheckResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.SettleTxCheckResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.SettleTxCheckResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsBeforeSettlementHeight();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool is_before_settlement_height = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bc.SettleTxCheckResponse.prototype.getIsBeforeSettlementHeight = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.bc.SettleTxCheckResponse.prototype.setIsBeforeSettlementHeight = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.bc.RoverMessageType = {
  FETCHBLOCK: 0,
  REQUESTRESYNC: 1
};

goog.object.extend(exports, proto.bc);
