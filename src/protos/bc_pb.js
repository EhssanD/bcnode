/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var core_pb = require('./core_pb.js');
goog.exportSymbol('proto.bc.GetBalanceRequest', null, global);
goog.exportSymbol('proto.bc.GetBalanceResponse', null, global);
goog.exportSymbol('proto.bc.GetBlake2blRequest', null, global);
goog.exportSymbol('proto.bc.GetBlake2blResponse', null, global);
goog.exportSymbol('proto.bc.GetLatestBlocksResponse', null, global);
goog.exportSymbol('proto.bc.GetMatchedOpenOrdersResponse', null, global);
goog.exportSymbol('proto.bc.GetOpenOrdersResponse', null, global);
goog.exportSymbol('proto.bc.HelpResponse', null, global);
goog.exportSymbol('proto.bc.MakerOrderInfo', null, global);
goog.exportSymbol('proto.bc.MatchedOpenOrder', null, global);
goog.exportSymbol('proto.bc.PlaceMakerOrderRequest', null, global);
goog.exportSymbol('proto.bc.PlaceTakerOrderRequest', null, global);
goog.exportSymbol('proto.bc.RpcTransaction', null, global);
goog.exportSymbol('proto.bc.RpcTransactionResponse', null, global);
goog.exportSymbol('proto.bc.RpcTransactionResponseStatus', null, global);
goog.exportSymbol('proto.bc.StatsResponse', null, global);
goog.exportSymbol('proto.bc.TakerOrderInfo', null, global);
goog.exportSymbol('proto.bc.VanityConvertRequest', null, global);
goog.exportSymbol('proto.bc.VanityConvertResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.GetLatestBlocksResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bc.GetLatestBlocksResponse.repeatedFields_, null);
};
goog.inherits(proto.bc.GetLatestBlocksResponse, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bc.GetLatestBlocksResponse.displayName = 'proto.bc.GetLatestBlocksResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bc.GetLatestBlocksResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.GetLatestBlocksResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.GetLatestBlocksResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.GetLatestBlocksResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.GetLatestBlocksResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    blocksList: jspb.Message.toObjectList(msg.getBlocksList(),
    core_pb.Block.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.GetLatestBlocksResponse}
 */
proto.bc.GetLatestBlocksResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.GetLatestBlocksResponse;
  return proto.bc.GetLatestBlocksResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.GetLatestBlocksResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.GetLatestBlocksResponse}
 */
proto.bc.GetLatestBlocksResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_pb.Block;
      reader.readMessage(value,core_pb.Block.deserializeBinaryFromReader);
      msg.addBlocks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.GetLatestBlocksResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.GetLatestBlocksResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.GetLatestBlocksResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.GetLatestBlocksResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlocksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      core_pb.Block.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Block blocks = 1;
 * @return {!Array.<!proto.bc.Block>}
 */
proto.bc.GetLatestBlocksResponse.prototype.getBlocksList = function() {
  return /** @type{!Array.<!proto.bc.Block>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_pb.Block, 1));
};


/** @param {!Array.<!proto.bc.Block>} value */
proto.bc.GetLatestBlocksResponse.prototype.setBlocksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.bc.Block=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.Block}
 */
proto.bc.GetLatestBlocksResponse.prototype.addBlocks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.bc.Block, opt_index);
};


proto.bc.GetLatestBlocksResponse.prototype.clearBlocksList = function() {
  this.setBlocksList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.HelpResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.HelpResponse, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bc.HelpResponse.displayName = 'proto.bc.HelpResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.HelpResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.HelpResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.HelpResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.HelpResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    helpText: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.HelpResponse}
 */
proto.bc.HelpResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.HelpResponse;
  return proto.bc.HelpResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.HelpResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.HelpResponse}
 */
proto.bc.HelpResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHelpText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.HelpResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.HelpResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.HelpResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.HelpResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHelpText();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string help_text = 1;
 * @return {string}
 */
proto.bc.HelpResponse.prototype.getHelpText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bc.HelpResponse.prototype.setHelpText = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.StatsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.StatsResponse, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bc.StatsResponse.displayName = 'proto.bc.StatsResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.StatsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.StatsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.StatsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.StatsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    calls: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.StatsResponse}
 */
proto.bc.StatsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.StatsResponse;
  return proto.bc.StatsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.StatsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.StatsResponse}
 */
proto.bc.StatsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCalls(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.StatsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.StatsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.StatsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.StatsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCalls();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 calls = 1;
 * @return {number}
 */
proto.bc.StatsResponse.prototype.getCalls = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.bc.StatsResponse.prototype.setCalls = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.RpcTransaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.RpcTransaction, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bc.RpcTransaction.displayName = 'proto.bc.RpcTransaction';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.RpcTransaction.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.RpcTransaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.RpcTransaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.RpcTransaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromAddr: jspb.Message.getFieldWithDefault(msg, 1, ""),
    toAddr: jspb.Message.getFieldWithDefault(msg, 2, ""),
    amount: msg.getAmount_asB64(),
    txFee: msg.getTxFee_asB64(),
    privateKeyHex: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.RpcTransaction}
 */
proto.bc.RpcTransaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.RpcTransaction;
  return proto.bc.RpcTransaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.RpcTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.RpcTransaction}
 */
proto.bc.RpcTransaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromAddr(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToAddr(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAmount(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTxFee(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrivateKeyHex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.RpcTransaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.RpcTransaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.RpcTransaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.RpcTransaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromAddr();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getToAddr();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAmount_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getTxFee_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getPrivateKeyHex();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string from_addr = 1;
 * @return {string}
 */
proto.bc.RpcTransaction.prototype.getFromAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bc.RpcTransaction.prototype.setFromAddr = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string to_addr = 2;
 * @return {string}
 */
proto.bc.RpcTransaction.prototype.getToAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.bc.RpcTransaction.prototype.setToAddr = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes amount = 3;
 * @return {!(string|Uint8Array)}
 */
proto.bc.RpcTransaction.prototype.getAmount = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes amount = 3;
 * This is a type-conversion wrapper around `getAmount()`
 * @return {string}
 */
proto.bc.RpcTransaction.prototype.getAmount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAmount()));
};


/**
 * optional bytes amount = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAmount()`
 * @return {!Uint8Array}
 */
proto.bc.RpcTransaction.prototype.getAmount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAmount()));
};


/** @param {!(string|Uint8Array)} value */
proto.bc.RpcTransaction.prototype.setAmount = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bytes tx_fee = 4;
 * @return {!(string|Uint8Array)}
 */
proto.bc.RpcTransaction.prototype.getTxFee = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes tx_fee = 4;
 * This is a type-conversion wrapper around `getTxFee()`
 * @return {string}
 */
proto.bc.RpcTransaction.prototype.getTxFee_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTxFee()));
};


/**
 * optional bytes tx_fee = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxFee()`
 * @return {!Uint8Array}
 */
proto.bc.RpcTransaction.prototype.getTxFee_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTxFee()));
};


/** @param {!(string|Uint8Array)} value */
proto.bc.RpcTransaction.prototype.setTxFee = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string private_key_hex = 5;
 * @return {string}
 */
proto.bc.RpcTransaction.prototype.getPrivateKeyHex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.bc.RpcTransaction.prototype.setPrivateKeyHex = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.RpcTransactionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.RpcTransactionResponse, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bc.RpcTransactionResponse.displayName = 'proto.bc.RpcTransactionResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.RpcTransactionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.RpcTransactionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.RpcTransactionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.RpcTransactionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    txHash: jspb.Message.getFieldWithDefault(msg, 2, ""),
    error: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.RpcTransactionResponse}
 */
proto.bc.RpcTransactionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.RpcTransactionResponse;
  return proto.bc.RpcTransactionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.RpcTransactionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.RpcTransactionResponse}
 */
proto.bc.RpcTransactionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.bc.RpcTransactionResponseStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxHash(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.RpcTransactionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.RpcTransactionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.RpcTransactionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.RpcTransactionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTxHash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional RpcTransactionResponseStatus status = 1;
 * @return {!proto.bc.RpcTransactionResponseStatus}
 */
proto.bc.RpcTransactionResponse.prototype.getStatus = function() {
  return /** @type {!proto.bc.RpcTransactionResponseStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.bc.RpcTransactionResponseStatus} value */
proto.bc.RpcTransactionResponse.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string tx_hash = 2;
 * @return {string}
 */
proto.bc.RpcTransactionResponse.prototype.getTxHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.bc.RpcTransactionResponse.prototype.setTxHash = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string error = 3;
 * @return {string}
 */
proto.bc.RpcTransactionResponse.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.bc.RpcTransactionResponse.prototype.setError = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.GetBalanceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.GetBalanceRequest, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bc.GetBalanceRequest.displayName = 'proto.bc.GetBalanceRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.GetBalanceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.GetBalanceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.GetBalanceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.GetBalanceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.GetBalanceRequest}
 */
proto.bc.GetBalanceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.GetBalanceRequest;
  return proto.bc.GetBalanceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.GetBalanceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.GetBalanceRequest}
 */
proto.bc.GetBalanceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.GetBalanceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.GetBalanceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.GetBalanceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.GetBalanceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.bc.GetBalanceRequest.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bc.GetBalanceRequest.prototype.setAddress = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.GetBalanceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.GetBalanceResponse, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bc.GetBalanceResponse.displayName = 'proto.bc.GetBalanceResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.GetBalanceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.GetBalanceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.GetBalanceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.GetBalanceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    confirmed: jspb.Message.getFieldWithDefault(msg, 1, ""),
    unconfirmed: jspb.Message.getFieldWithDefault(msg, 2, ""),
    collateralized: jspb.Message.getFieldWithDefault(msg, 3, ""),
    unit: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.GetBalanceResponse}
 */
proto.bc.GetBalanceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.GetBalanceResponse;
  return proto.bc.GetBalanceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.GetBalanceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.GetBalanceResponse}
 */
proto.bc.GetBalanceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setConfirmed(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnconfirmed(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollateralized(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.GetBalanceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.GetBalanceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.GetBalanceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.GetBalanceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfirmed();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUnconfirmed();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCollateralized();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUnit();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string confirmed = 1;
 * @return {string}
 */
proto.bc.GetBalanceResponse.prototype.getConfirmed = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bc.GetBalanceResponse.prototype.setConfirmed = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string unconfirmed = 2;
 * @return {string}
 */
proto.bc.GetBalanceResponse.prototype.getUnconfirmed = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.bc.GetBalanceResponse.prototype.setUnconfirmed = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string collateralized = 3;
 * @return {string}
 */
proto.bc.GetBalanceResponse.prototype.getCollateralized = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.bc.GetBalanceResponse.prototype.setCollateralized = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string unit = 4;
 * @return {string}
 */
proto.bc.GetBalanceResponse.prototype.getUnit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.bc.GetBalanceResponse.prototype.setUnit = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.MakerOrderInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.MakerOrderInfo, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bc.MakerOrderInfo.displayName = 'proto.bc.MakerOrderInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.MakerOrderInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.MakerOrderInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.MakerOrderInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.MakerOrderInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    shiftStartsAt: jspb.Message.getFieldWithDefault(msg, 1, 0),
    depositEndsAt: jspb.Message.getFieldWithDefault(msg, 2, 0),
    settleEndsAt: jspb.Message.getFieldWithDefault(msg, 3, 0),
    paysChainId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    wantsChainId: jspb.Message.getFieldWithDefault(msg, 5, ""),
    wantsAddress: jspb.Message.getFieldWithDefault(msg, 6, ""),
    wantsUnit: jspb.Message.getFieldWithDefault(msg, 7, ""),
    paysUnit: jspb.Message.getFieldWithDefault(msg, 8, ""),
    doubleHashedBcAddress: jspb.Message.getFieldWithDefault(msg, 9, ""),
    collateralizedNrg: jspb.Message.getFieldWithDefault(msg, 10, ""),
    nrgUnit: jspb.Message.getFieldWithDefault(msg, 11, ""),
    txHash: jspb.Message.getFieldWithDefault(msg, 12, ""),
    txOutputIndex: jspb.Message.getFieldWithDefault(msg, 13, 0),
    blockHash: jspb.Message.getFieldWithDefault(msg, 14, ""),
    blockHeight: jspb.Message.getFieldWithDefault(msg, 15, 0),
    isSettled: jspb.Message.getFieldWithDefault(msg, 16, false),
    blockHeightHasOriginalMakerTx: jspb.Message.getFieldWithDefault(msg, 17, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.MakerOrderInfo}
 */
proto.bc.MakerOrderInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.MakerOrderInfo;
  return proto.bc.MakerOrderInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.MakerOrderInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.MakerOrderInfo}
 */
proto.bc.MakerOrderInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setShiftStartsAt(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDepositEndsAt(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSettleEndsAt(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPaysChainId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setWantsChainId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setWantsAddress(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setWantsUnit(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setPaysUnit(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setDoubleHashedBcAddress(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollateralizedNrg(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setNrgUnit(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxHash(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTxOutputIndex(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockHash(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockHeight(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsSettled(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockHeightHasOriginalMakerTx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.MakerOrderInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.MakerOrderInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.MakerOrderInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.MakerOrderInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShiftStartsAt();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getDepositEndsAt();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getSettleEndsAt();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getPaysChainId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getWantsChainId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getWantsAddress();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getWantsUnit();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getPaysUnit();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getDoubleHashedBcAddress();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getCollateralizedNrg();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getNrgUnit();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getTxHash();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getTxOutputIndex();
  if (f !== 0) {
    writer.writeUint64(
      13,
      f
    );
  }
  f = message.getBlockHash();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeUint64(
      15,
      f
    );
  }
  f = message.getIsSettled();
  if (f) {
    writer.writeBool(
      16,
      f
    );
  }
  f = message.getBlockHeightHasOriginalMakerTx();
  if (f !== 0) {
    writer.writeUint64(
      17,
      f
    );
  }
};


/**
 * optional uint64 shift_starts_at = 1;
 * @return {number}
 */
proto.bc.MakerOrderInfo.prototype.getShiftStartsAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.bc.MakerOrderInfo.prototype.setShiftStartsAt = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint64 deposit_ends_at = 2;
 * @return {number}
 */
proto.bc.MakerOrderInfo.prototype.getDepositEndsAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.bc.MakerOrderInfo.prototype.setDepositEndsAt = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint64 settle_ends_at = 3;
 * @return {number}
 */
proto.bc.MakerOrderInfo.prototype.getSettleEndsAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.bc.MakerOrderInfo.prototype.setSettleEndsAt = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string pays_chain_id = 4;
 * @return {string}
 */
proto.bc.MakerOrderInfo.prototype.getPaysChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.bc.MakerOrderInfo.prototype.setPaysChainId = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string wants_chain_id = 5;
 * @return {string}
 */
proto.bc.MakerOrderInfo.prototype.getWantsChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.bc.MakerOrderInfo.prototype.setWantsChainId = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string wants_address = 6;
 * @return {string}
 */
proto.bc.MakerOrderInfo.prototype.getWantsAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.bc.MakerOrderInfo.prototype.setWantsAddress = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string wants_unit = 7;
 * @return {string}
 */
proto.bc.MakerOrderInfo.prototype.getWantsUnit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.bc.MakerOrderInfo.prototype.setWantsUnit = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string pays_unit = 8;
 * @return {string}
 */
proto.bc.MakerOrderInfo.prototype.getPaysUnit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.bc.MakerOrderInfo.prototype.setPaysUnit = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string double_hashed_bc_address = 9;
 * @return {string}
 */
proto.bc.MakerOrderInfo.prototype.getDoubleHashedBcAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.bc.MakerOrderInfo.prototype.setDoubleHashedBcAddress = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string collateralized_nrg = 10;
 * @return {string}
 */
proto.bc.MakerOrderInfo.prototype.getCollateralizedNrg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.bc.MakerOrderInfo.prototype.setCollateralizedNrg = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional string nrg_unit = 11;
 * @return {string}
 */
proto.bc.MakerOrderInfo.prototype.getNrgUnit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.bc.MakerOrderInfo.prototype.setNrgUnit = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional string tx_hash = 12;
 * @return {string}
 */
proto.bc.MakerOrderInfo.prototype.getTxHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.bc.MakerOrderInfo.prototype.setTxHash = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional uint64 tx_output_index = 13;
 * @return {number}
 */
proto.bc.MakerOrderInfo.prototype.getTxOutputIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.bc.MakerOrderInfo.prototype.setTxOutputIndex = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional string block_hash = 14;
 * @return {string}
 */
proto.bc.MakerOrderInfo.prototype.getBlockHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.bc.MakerOrderInfo.prototype.setBlockHash = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * optional uint64 block_height = 15;
 * @return {number}
 */
proto.bc.MakerOrderInfo.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.bc.MakerOrderInfo.prototype.setBlockHeight = function(value) {
  jspb.Message.setField(this, 15, value);
};


/**
 * optional bool is_settled = 16;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bc.MakerOrderInfo.prototype.getIsSettled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 16, false));
};


/** @param {boolean} value */
proto.bc.MakerOrderInfo.prototype.setIsSettled = function(value) {
  jspb.Message.setField(this, 16, value);
};


/**
 * optional uint64 block_height_has_original_maker_tx = 17;
 * @return {number}
 */
proto.bc.MakerOrderInfo.prototype.getBlockHeightHasOriginalMakerTx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {number} value */
proto.bc.MakerOrderInfo.prototype.setBlockHeightHasOriginalMakerTx = function(value) {
  jspb.Message.setField(this, 17, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.TakerOrderInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.TakerOrderInfo, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bc.TakerOrderInfo.displayName = 'proto.bc.TakerOrderInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.TakerOrderInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.TakerOrderInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.TakerOrderInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.TakerOrderInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    sendsAddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    wantsAddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    makerTxHash: jspb.Message.getFieldWithDefault(msg, 3, ""),
    makerTxOutputIndex: jspb.Message.getFieldWithDefault(msg, 4, 0),
    doubleHashedBcAddress: jspb.Message.getFieldWithDefault(msg, 5, ""),
    collateralizedNrg: jspb.Message.getFieldWithDefault(msg, 6, ""),
    blockHash: jspb.Message.getFieldWithDefault(msg, 7, ""),
    blockHeight: jspb.Message.getFieldWithDefault(msg, 8, 0),
    isSettled: jspb.Message.getFieldWithDefault(msg, 9, false),
    txHash: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.TakerOrderInfo}
 */
proto.bc.TakerOrderInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.TakerOrderInfo;
  return proto.bc.TakerOrderInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.TakerOrderInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.TakerOrderInfo}
 */
proto.bc.TakerOrderInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSendsAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setWantsAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMakerTxHash(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMakerTxOutputIndex(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDoubleHashedBcAddress(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollateralizedNrg(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockHash(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockHeight(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsSettled(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.TakerOrderInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.TakerOrderInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.TakerOrderInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.TakerOrderInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSendsAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getWantsAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMakerTxHash();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMakerTxOutputIndex();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getDoubleHashedBcAddress();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCollateralizedNrg();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getBlockHash();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getIsSettled();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getTxHash();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional string sends_address = 1;
 * @return {string}
 */
proto.bc.TakerOrderInfo.prototype.getSendsAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bc.TakerOrderInfo.prototype.setSendsAddress = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string wants_address = 2;
 * @return {string}
 */
proto.bc.TakerOrderInfo.prototype.getWantsAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.bc.TakerOrderInfo.prototype.setWantsAddress = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string maker_tx_hash = 3;
 * @return {string}
 */
proto.bc.TakerOrderInfo.prototype.getMakerTxHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.bc.TakerOrderInfo.prototype.setMakerTxHash = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 maker_tx_output_index = 4;
 * @return {number}
 */
proto.bc.TakerOrderInfo.prototype.getMakerTxOutputIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.bc.TakerOrderInfo.prototype.setMakerTxOutputIndex = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string double_hashed_bc_address = 5;
 * @return {string}
 */
proto.bc.TakerOrderInfo.prototype.getDoubleHashedBcAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.bc.TakerOrderInfo.prototype.setDoubleHashedBcAddress = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string collateralized_nrg = 6;
 * @return {string}
 */
proto.bc.TakerOrderInfo.prototype.getCollateralizedNrg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.bc.TakerOrderInfo.prototype.setCollateralizedNrg = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string block_hash = 7;
 * @return {string}
 */
proto.bc.TakerOrderInfo.prototype.getBlockHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.bc.TakerOrderInfo.prototype.setBlockHash = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional uint64 block_height = 8;
 * @return {number}
 */
proto.bc.TakerOrderInfo.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.bc.TakerOrderInfo.prototype.setBlockHeight = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional bool is_settled = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bc.TakerOrderInfo.prototype.getIsSettled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.bc.TakerOrderInfo.prototype.setIsSettled = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string tx_hash = 10;
 * @return {string}
 */
proto.bc.TakerOrderInfo.prototype.getTxHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.bc.TakerOrderInfo.prototype.setTxHash = function(value) {
  jspb.Message.setField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.MatchedOpenOrder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.MatchedOpenOrder, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bc.MatchedOpenOrder.displayName = 'proto.bc.MatchedOpenOrder';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.MatchedOpenOrder.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.MatchedOpenOrder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.MatchedOpenOrder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.MatchedOpenOrder.toObject = function(includeInstance, msg) {
  var f, obj = {
    maker: (f = msg.getMaker()) && proto.bc.MakerOrderInfo.toObject(includeInstance, f),
    taker: (f = msg.getTaker()) && proto.bc.TakerOrderInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.MatchedOpenOrder}
 */
proto.bc.MatchedOpenOrder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.MatchedOpenOrder;
  return proto.bc.MatchedOpenOrder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.MatchedOpenOrder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.MatchedOpenOrder}
 */
proto.bc.MatchedOpenOrder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bc.MakerOrderInfo;
      reader.readMessage(value,proto.bc.MakerOrderInfo.deserializeBinaryFromReader);
      msg.setMaker(value);
      break;
    case 2:
      var value = new proto.bc.TakerOrderInfo;
      reader.readMessage(value,proto.bc.TakerOrderInfo.deserializeBinaryFromReader);
      msg.setTaker(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.MatchedOpenOrder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.MatchedOpenOrder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.MatchedOpenOrder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.MatchedOpenOrder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaker();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bc.MakerOrderInfo.serializeBinaryToWriter
    );
  }
  f = message.getTaker();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bc.TakerOrderInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional MakerOrderInfo maker = 1;
 * @return {?proto.bc.MakerOrderInfo}
 */
proto.bc.MatchedOpenOrder.prototype.getMaker = function() {
  return /** @type{?proto.bc.MakerOrderInfo} */ (
    jspb.Message.getWrapperField(this, proto.bc.MakerOrderInfo, 1));
};


/** @param {?proto.bc.MakerOrderInfo|undefined} value */
proto.bc.MatchedOpenOrder.prototype.setMaker = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bc.MatchedOpenOrder.prototype.clearMaker = function() {
  this.setMaker(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bc.MatchedOpenOrder.prototype.hasMaker = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TakerOrderInfo taker = 2;
 * @return {?proto.bc.TakerOrderInfo}
 */
proto.bc.MatchedOpenOrder.prototype.getTaker = function() {
  return /** @type{?proto.bc.TakerOrderInfo} */ (
    jspb.Message.getWrapperField(this, proto.bc.TakerOrderInfo, 2));
};


/** @param {?proto.bc.TakerOrderInfo|undefined} value */
proto.bc.MatchedOpenOrder.prototype.setTaker = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bc.MatchedOpenOrder.prototype.clearTaker = function() {
  this.setTaker(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bc.MatchedOpenOrder.prototype.hasTaker = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.GetOpenOrdersResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bc.GetOpenOrdersResponse.repeatedFields_, null);
};
goog.inherits(proto.bc.GetOpenOrdersResponse, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bc.GetOpenOrdersResponse.displayName = 'proto.bc.GetOpenOrdersResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bc.GetOpenOrdersResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.GetOpenOrdersResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.GetOpenOrdersResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.GetOpenOrdersResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.GetOpenOrdersResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    openOrdersList: jspb.Message.toObjectList(msg.getOpenOrdersList(),
    proto.bc.MakerOrderInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.GetOpenOrdersResponse}
 */
proto.bc.GetOpenOrdersResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.GetOpenOrdersResponse;
  return proto.bc.GetOpenOrdersResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.GetOpenOrdersResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.GetOpenOrdersResponse}
 */
proto.bc.GetOpenOrdersResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bc.MakerOrderInfo;
      reader.readMessage(value,proto.bc.MakerOrderInfo.deserializeBinaryFromReader);
      msg.addOpenOrders(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.GetOpenOrdersResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.GetOpenOrdersResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.GetOpenOrdersResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.GetOpenOrdersResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpenOrdersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.bc.MakerOrderInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MakerOrderInfo open_orders = 1;
 * @return {!Array.<!proto.bc.MakerOrderInfo>}
 */
proto.bc.GetOpenOrdersResponse.prototype.getOpenOrdersList = function() {
  return /** @type{!Array.<!proto.bc.MakerOrderInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bc.MakerOrderInfo, 1));
};


/** @param {!Array.<!proto.bc.MakerOrderInfo>} value */
proto.bc.GetOpenOrdersResponse.prototype.setOpenOrdersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.bc.MakerOrderInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.MakerOrderInfo}
 */
proto.bc.GetOpenOrdersResponse.prototype.addOpenOrders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.bc.MakerOrderInfo, opt_index);
};


proto.bc.GetOpenOrdersResponse.prototype.clearOpenOrdersList = function() {
  this.setOpenOrdersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.GetMatchedOpenOrdersResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bc.GetMatchedOpenOrdersResponse.repeatedFields_, null);
};
goog.inherits(proto.bc.GetMatchedOpenOrdersResponse, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bc.GetMatchedOpenOrdersResponse.displayName = 'proto.bc.GetMatchedOpenOrdersResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bc.GetMatchedOpenOrdersResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.GetMatchedOpenOrdersResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.GetMatchedOpenOrdersResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.GetMatchedOpenOrdersResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.GetMatchedOpenOrdersResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ordersList: jspb.Message.toObjectList(msg.getOrdersList(),
    proto.bc.MatchedOpenOrder.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.GetMatchedOpenOrdersResponse}
 */
proto.bc.GetMatchedOpenOrdersResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.GetMatchedOpenOrdersResponse;
  return proto.bc.GetMatchedOpenOrdersResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.GetMatchedOpenOrdersResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.GetMatchedOpenOrdersResponse}
 */
proto.bc.GetMatchedOpenOrdersResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bc.MatchedOpenOrder;
      reader.readMessage(value,proto.bc.MatchedOpenOrder.deserializeBinaryFromReader);
      msg.addOrders(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.GetMatchedOpenOrdersResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.GetMatchedOpenOrdersResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.GetMatchedOpenOrdersResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.GetMatchedOpenOrdersResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrdersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.bc.MatchedOpenOrder.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MatchedOpenOrder orders = 1;
 * @return {!Array.<!proto.bc.MatchedOpenOrder>}
 */
proto.bc.GetMatchedOpenOrdersResponse.prototype.getOrdersList = function() {
  return /** @type{!Array.<!proto.bc.MatchedOpenOrder>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bc.MatchedOpenOrder, 1));
};


/** @param {!Array.<!proto.bc.MatchedOpenOrder>} value */
proto.bc.GetMatchedOpenOrdersResponse.prototype.setOrdersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.bc.MatchedOpenOrder=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.MatchedOpenOrder}
 */
proto.bc.GetMatchedOpenOrdersResponse.prototype.addOrders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.bc.MatchedOpenOrder, opt_index);
};


proto.bc.GetMatchedOpenOrdersResponse.prototype.clearOrdersList = function() {
  this.setOrdersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.PlaceMakerOrderRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.PlaceMakerOrderRequest, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bc.PlaceMakerOrderRequest.displayName = 'proto.bc.PlaceMakerOrderRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.PlaceMakerOrderRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.PlaceMakerOrderRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.PlaceMakerOrderRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.PlaceMakerOrderRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    shiftStartsAt: jspb.Message.getFieldWithDefault(msg, 1, 0),
    depositEndsAt: jspb.Message.getFieldWithDefault(msg, 2, 0),
    settleEndsAt: jspb.Message.getFieldWithDefault(msg, 3, 0),
    paysWithChainId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    wantsChainId: jspb.Message.getFieldWithDefault(msg, 5, ""),
    wantsChainAddress: jspb.Message.getFieldWithDefault(msg, 6, ""),
    wantsUnit: jspb.Message.getFieldWithDefault(msg, 7, ""),
    paysUnit: jspb.Message.getFieldWithDefault(msg, 8, ""),
    bcAddress: jspb.Message.getFieldWithDefault(msg, 9, ""),
    bcPrivateKeyHex: jspb.Message.getFieldWithDefault(msg, 10, ""),
    collateralizedNrg: jspb.Message.getFieldWithDefault(msg, 11, ""),
    nrgUnit: jspb.Message.getFieldWithDefault(msg, 12, ""),
    txFee: jspb.Message.getFieldWithDefault(msg, 13, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.PlaceMakerOrderRequest}
 */
proto.bc.PlaceMakerOrderRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.PlaceMakerOrderRequest;
  return proto.bc.PlaceMakerOrderRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.PlaceMakerOrderRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.PlaceMakerOrderRequest}
 */
proto.bc.PlaceMakerOrderRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setShiftStartsAt(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDepositEndsAt(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSettleEndsAt(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPaysWithChainId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setWantsChainId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setWantsChainAddress(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setWantsUnit(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setPaysUnit(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setBcAddress(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setBcPrivateKeyHex(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollateralizedNrg(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setNrgUnit(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxFee(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.PlaceMakerOrderRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.PlaceMakerOrderRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.PlaceMakerOrderRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.PlaceMakerOrderRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShiftStartsAt();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getDepositEndsAt();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getSettleEndsAt();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getPaysWithChainId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getWantsChainId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getWantsChainAddress();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getWantsUnit();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getPaysUnit();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getBcAddress();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getBcPrivateKeyHex();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getCollateralizedNrg();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getNrgUnit();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getTxFee();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * optional uint64 shift_starts_at = 1;
 * @return {number}
 */
proto.bc.PlaceMakerOrderRequest.prototype.getShiftStartsAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.bc.PlaceMakerOrderRequest.prototype.setShiftStartsAt = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint64 deposit_ends_at = 2;
 * @return {number}
 */
proto.bc.PlaceMakerOrderRequest.prototype.getDepositEndsAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.bc.PlaceMakerOrderRequest.prototype.setDepositEndsAt = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint64 settle_ends_at = 3;
 * @return {number}
 */
proto.bc.PlaceMakerOrderRequest.prototype.getSettleEndsAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.bc.PlaceMakerOrderRequest.prototype.setSettleEndsAt = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string pays_with_chain_id = 4;
 * @return {string}
 */
proto.bc.PlaceMakerOrderRequest.prototype.getPaysWithChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.bc.PlaceMakerOrderRequest.prototype.setPaysWithChainId = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string wants_chain_id = 5;
 * @return {string}
 */
proto.bc.PlaceMakerOrderRequest.prototype.getWantsChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.bc.PlaceMakerOrderRequest.prototype.setWantsChainId = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string wants_chain_address = 6;
 * @return {string}
 */
proto.bc.PlaceMakerOrderRequest.prototype.getWantsChainAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.bc.PlaceMakerOrderRequest.prototype.setWantsChainAddress = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string wants_unit = 7;
 * @return {string}
 */
proto.bc.PlaceMakerOrderRequest.prototype.getWantsUnit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.bc.PlaceMakerOrderRequest.prototype.setWantsUnit = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string pays_unit = 8;
 * @return {string}
 */
proto.bc.PlaceMakerOrderRequest.prototype.getPaysUnit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.bc.PlaceMakerOrderRequest.prototype.setPaysUnit = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string bc_address = 9;
 * @return {string}
 */
proto.bc.PlaceMakerOrderRequest.prototype.getBcAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.bc.PlaceMakerOrderRequest.prototype.setBcAddress = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string bc_private_key_hex = 10;
 * @return {string}
 */
proto.bc.PlaceMakerOrderRequest.prototype.getBcPrivateKeyHex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.bc.PlaceMakerOrderRequest.prototype.setBcPrivateKeyHex = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional string collateralized_nrg = 11;
 * @return {string}
 */
proto.bc.PlaceMakerOrderRequest.prototype.getCollateralizedNrg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.bc.PlaceMakerOrderRequest.prototype.setCollateralizedNrg = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional string nrg_unit = 12;
 * @return {string}
 */
proto.bc.PlaceMakerOrderRequest.prototype.getNrgUnit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.bc.PlaceMakerOrderRequest.prototype.setNrgUnit = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional string tx_fee = 13;
 * @return {string}
 */
proto.bc.PlaceMakerOrderRequest.prototype.getTxFee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.bc.PlaceMakerOrderRequest.prototype.setTxFee = function(value) {
  jspb.Message.setField(this, 13, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.PlaceTakerOrderRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.PlaceTakerOrderRequest, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bc.PlaceTakerOrderRequest.displayName = 'proto.bc.PlaceTakerOrderRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.PlaceTakerOrderRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.PlaceTakerOrderRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.PlaceTakerOrderRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.PlaceTakerOrderRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    wantsChainAddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sendsChainAddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    makerTxHash: jspb.Message.getFieldWithDefault(msg, 3, ""),
    makerTxOutputIndex: jspb.Message.getFieldWithDefault(msg, 4, 0),
    bcAddress: jspb.Message.getFieldWithDefault(msg, 5, ""),
    bcPrivateKeyHex: jspb.Message.getFieldWithDefault(msg, 6, ""),
    collateralizedNrg: jspb.Message.getFieldWithDefault(msg, 7, ""),
    txFee: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.PlaceTakerOrderRequest}
 */
proto.bc.PlaceTakerOrderRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.PlaceTakerOrderRequest;
  return proto.bc.PlaceTakerOrderRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.PlaceTakerOrderRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.PlaceTakerOrderRequest}
 */
proto.bc.PlaceTakerOrderRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWantsChainAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSendsChainAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMakerTxHash(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMakerTxOutputIndex(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setBcAddress(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setBcPrivateKeyHex(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollateralizedNrg(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxFee(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.PlaceTakerOrderRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.PlaceTakerOrderRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.PlaceTakerOrderRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.PlaceTakerOrderRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWantsChainAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSendsChainAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMakerTxHash();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMakerTxOutputIndex();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getBcAddress();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getBcPrivateKeyHex();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCollateralizedNrg();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getTxFee();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string wants_chain_address = 1;
 * @return {string}
 */
proto.bc.PlaceTakerOrderRequest.prototype.getWantsChainAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bc.PlaceTakerOrderRequest.prototype.setWantsChainAddress = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string sends_chain_address = 2;
 * @return {string}
 */
proto.bc.PlaceTakerOrderRequest.prototype.getSendsChainAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.bc.PlaceTakerOrderRequest.prototype.setSendsChainAddress = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string maker_tx_hash = 3;
 * @return {string}
 */
proto.bc.PlaceTakerOrderRequest.prototype.getMakerTxHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.bc.PlaceTakerOrderRequest.prototype.setMakerTxHash = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 maker_tx_output_index = 4;
 * @return {number}
 */
proto.bc.PlaceTakerOrderRequest.prototype.getMakerTxOutputIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.bc.PlaceTakerOrderRequest.prototype.setMakerTxOutputIndex = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string bc_address = 5;
 * @return {string}
 */
proto.bc.PlaceTakerOrderRequest.prototype.getBcAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.bc.PlaceTakerOrderRequest.prototype.setBcAddress = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string bc_private_key_hex = 6;
 * @return {string}
 */
proto.bc.PlaceTakerOrderRequest.prototype.getBcPrivateKeyHex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.bc.PlaceTakerOrderRequest.prototype.setBcPrivateKeyHex = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string collateralized_nrg = 7;
 * @return {string}
 */
proto.bc.PlaceTakerOrderRequest.prototype.getCollateralizedNrg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.bc.PlaceTakerOrderRequest.prototype.setCollateralizedNrg = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string tx_fee = 8;
 * @return {string}
 */
proto.bc.PlaceTakerOrderRequest.prototype.getTxFee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.bc.PlaceTakerOrderRequest.prototype.setTxFee = function(value) {
  jspb.Message.setField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.GetBlake2blRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.GetBlake2blRequest, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bc.GetBlake2blRequest.displayName = 'proto.bc.GetBlake2blRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.GetBlake2blRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.GetBlake2blRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.GetBlake2blRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.GetBlake2blRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    toBeHashed: jspb.Message.getFieldWithDefault(msg, 1, ""),
    times: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.GetBlake2blRequest}
 */
proto.bc.GetBlake2blRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.GetBlake2blRequest;
  return proto.bc.GetBlake2blRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.GetBlake2blRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.GetBlake2blRequest}
 */
proto.bc.GetBlake2blRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToBeHashed(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.GetBlake2blRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.GetBlake2blRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.GetBlake2blRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.GetBlake2blRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToBeHashed();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTimes();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string to_be_hashed = 1;
 * @return {string}
 */
proto.bc.GetBlake2blRequest.prototype.getToBeHashed = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bc.GetBlake2blRequest.prototype.setToBeHashed = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 times = 2;
 * @return {number}
 */
proto.bc.GetBlake2blRequest.prototype.getTimes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.bc.GetBlake2blRequest.prototype.setTimes = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.GetBlake2blResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.GetBlake2blResponse, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bc.GetBlake2blResponse.displayName = 'proto.bc.GetBlake2blResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.GetBlake2blResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.GetBlake2blResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.GetBlake2blResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.GetBlake2blResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.GetBlake2blResponse}
 */
proto.bc.GetBlake2blResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.GetBlake2blResponse;
  return proto.bc.GetBlake2blResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.GetBlake2blResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.GetBlake2blResponse}
 */
proto.bc.GetBlake2blResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.GetBlake2blResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.GetBlake2blResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.GetBlake2blResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.GetBlake2blResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string hash = 1;
 * @return {string}
 */
proto.bc.GetBlake2blResponse.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bc.GetBlake2blResponse.prototype.setHash = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.VanityConvertRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.VanityConvertRequest, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bc.VanityConvertRequest.displayName = 'proto.bc.VanityConvertRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.VanityConvertRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.VanityConvertRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.VanityConvertRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.VanityConvertRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    vanity: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.VanityConvertRequest}
 */
proto.bc.VanityConvertRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.VanityConvertRequest;
  return proto.bc.VanityConvertRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.VanityConvertRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.VanityConvertRequest}
 */
proto.bc.VanityConvertRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVanity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.VanityConvertRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.VanityConvertRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.VanityConvertRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.VanityConvertRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVanity();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string vanity = 1;
 * @return {string}
 */
proto.bc.VanityConvertRequest.prototype.getVanity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bc.VanityConvertRequest.prototype.setVanity = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.VanityConvertResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.VanityConvertResponse, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bc.VanityConvertResponse.displayName = 'proto.bc.VanityConvertResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.VanityConvertResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.VanityConvertResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.VanityConvertResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.VanityConvertResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    bcAddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    error: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.VanityConvertResponse}
 */
proto.bc.VanityConvertResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.VanityConvertResponse;
  return proto.bc.VanityConvertResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.VanityConvertResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.VanityConvertResponse}
 */
proto.bc.VanityConvertResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBcAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.VanityConvertResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.VanityConvertResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.VanityConvertResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.VanityConvertResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBcAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string bc_address = 1;
 * @return {string}
 */
proto.bc.VanityConvertResponse.prototype.getBcAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bc.VanityConvertResponse.prototype.setBcAddress = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string error = 2;
 * @return {string}
 */
proto.bc.VanityConvertResponse.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.bc.VanityConvertResponse.prototype.setError = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.bc.RpcTransactionResponseStatus = {
  SUCCESS: 0,
  FAILURE: 1
};

goog.object.extend(exports, proto.bc);
