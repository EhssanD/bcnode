// This file is generated by rust-protobuf 2.0.4. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct RoverIdent {
    // message fields
    pub rover_name: ::std::string::String,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl RoverIdent {
    pub fn new() -> RoverIdent {
        ::std::default::Default::default()
    }

    // string rover_name = 1;

    pub fn clear_rover_name(&mut self) {
        self.rover_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_rover_name(&mut self, v: ::std::string::String) {
        self.rover_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rover_name(&mut self) -> &mut ::std::string::String {
        &mut self.rover_name
    }

    // Take field
    pub fn take_rover_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rover_name, ::std::string::String::new())
    }

    pub fn get_rover_name(&self) -> &str {
        &self.rover_name
    }
}

impl ::protobuf::Message for RoverIdent {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rover_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.rover_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.rover_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.rover_name.is_empty() {
            os.write_string(1, &self.rover_name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RoverIdent {
        RoverIdent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "rover_name",
                    |m: &RoverIdent| { &m.rover_name },
                    |m: &mut RoverIdent| { &mut m.rover_name },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RoverIdent>(
                    "RoverIdent",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RoverIdent {
        static mut instance: ::protobuf::lazy::Lazy<RoverIdent> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RoverIdent,
        };
        unsafe {
            instance.get(RoverIdent::new)
        }
    }
}

impl ::protobuf::Clear for RoverIdent {
    fn clear(&mut self) {
        self.clear_rover_name();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RoverIdent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RoverIdent {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RoverMessage {
    // message fields
    pub field_type: RoverMessageType,
    // message oneof groups
    pub payload: ::std::option::Option<RoverMessage_oneof_payload>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

#[derive(Clone,PartialEq)]
pub enum RoverMessage_oneof_payload {
    resync(RoverMessage_Resync),
    fetch_block(RoverMessage_FetchBlock),
}

impl RoverMessage {
    pub fn new() -> RoverMessage {
        ::std::default::Default::default()
    }

    // .bc.RoverMessageType type = 1;

    pub fn clear_field_type(&mut self) {
        self.field_type = RoverMessageType::FetchBlock;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: RoverMessageType) {
        self.field_type = v;
    }

    pub fn get_field_type(&self) -> RoverMessageType {
        self.field_type
    }

    // .bc.RoverMessage.Resync resync = 2;

    pub fn clear_resync(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_resync(&self) -> bool {
        match self.payload {
            ::std::option::Option::Some(RoverMessage_oneof_payload::resync(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_resync(&mut self, v: RoverMessage_Resync) {
        self.payload = ::std::option::Option::Some(RoverMessage_oneof_payload::resync(v))
    }

    // Mutable pointer to the field.
    pub fn mut_resync(&mut self) -> &mut RoverMessage_Resync {
        if let ::std::option::Option::Some(RoverMessage_oneof_payload::resync(_)) = self.payload {
        } else {
            self.payload = ::std::option::Option::Some(RoverMessage_oneof_payload::resync(RoverMessage_Resync::new()));
        }
        match self.payload {
            ::std::option::Option::Some(RoverMessage_oneof_payload::resync(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_resync(&mut self) -> RoverMessage_Resync {
        if self.has_resync() {
            match self.payload.take() {
                ::std::option::Option::Some(RoverMessage_oneof_payload::resync(v)) => v,
                _ => panic!(),
            }
        } else {
            RoverMessage_Resync::new()
        }
    }

    pub fn get_resync(&self) -> &RoverMessage_Resync {
        match self.payload {
            ::std::option::Option::Some(RoverMessage_oneof_payload::resync(ref v)) => v,
            _ => RoverMessage_Resync::default_instance(),
        }
    }

    // .bc.RoverMessage.FetchBlock fetch_block = 3;

    pub fn clear_fetch_block(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_fetch_block(&self) -> bool {
        match self.payload {
            ::std::option::Option::Some(RoverMessage_oneof_payload::fetch_block(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_fetch_block(&mut self, v: RoverMessage_FetchBlock) {
        self.payload = ::std::option::Option::Some(RoverMessage_oneof_payload::fetch_block(v))
    }

    // Mutable pointer to the field.
    pub fn mut_fetch_block(&mut self) -> &mut RoverMessage_FetchBlock {
        if let ::std::option::Option::Some(RoverMessage_oneof_payload::fetch_block(_)) = self.payload {
        } else {
            self.payload = ::std::option::Option::Some(RoverMessage_oneof_payload::fetch_block(RoverMessage_FetchBlock::new()));
        }
        match self.payload {
            ::std::option::Option::Some(RoverMessage_oneof_payload::fetch_block(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_fetch_block(&mut self) -> RoverMessage_FetchBlock {
        if self.has_fetch_block() {
            match self.payload.take() {
                ::std::option::Option::Some(RoverMessage_oneof_payload::fetch_block(v)) => v,
                _ => panic!(),
            }
        } else {
            RoverMessage_FetchBlock::new()
        }
    }

    pub fn get_fetch_block(&self) -> &RoverMessage_FetchBlock {
        match self.payload {
            ::std::option::Option::Some(RoverMessage_oneof_payload::fetch_block(ref v)) => v,
            _ => RoverMessage_FetchBlock::default_instance(),
        }
    }
}

impl ::protobuf::Message for RoverMessage {
    fn is_initialized(&self) -> bool {
        if let Some(RoverMessage_oneof_payload::resync(ref v)) = self.payload {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(RoverMessage_oneof_payload::fetch_block(ref v)) = self.payload {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.payload = ::std::option::Option::Some(RoverMessage_oneof_payload::resync(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.payload = ::std::option::Option::Some(RoverMessage_oneof_payload::fetch_block(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.field_type != RoverMessageType::FetchBlock {
            my_size += ::protobuf::rt::enum_size(1, self.field_type);
        }
        if let ::std::option::Option::Some(ref v) = self.payload {
            match v {
                &RoverMessage_oneof_payload::resync(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &RoverMessage_oneof_payload::fetch_block(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.field_type != RoverMessageType::FetchBlock {
            os.write_enum(1, self.field_type.value())?;
        }
        if let ::std::option::Option::Some(ref v) = self.payload {
            match v {
                &RoverMessage_oneof_payload::resync(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &RoverMessage_oneof_payload::fetch_block(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RoverMessage {
        RoverMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<RoverMessageType>>(
                    "type",
                    |m: &RoverMessage| { &m.field_type },
                    |m: &mut RoverMessage| { &mut m.field_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, RoverMessage_Resync>(
                    "resync",
                    RoverMessage::has_resync,
                    RoverMessage::get_resync,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, RoverMessage_FetchBlock>(
                    "fetch_block",
                    RoverMessage::has_fetch_block,
                    RoverMessage::get_fetch_block,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RoverMessage>(
                    "RoverMessage",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RoverMessage {
        static mut instance: ::protobuf::lazy::Lazy<RoverMessage> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RoverMessage,
        };
        unsafe {
            instance.get(RoverMessage::new)
        }
    }
}

impl ::protobuf::Clear for RoverMessage {
    fn clear(&mut self) {
        self.clear_field_type();
        self.clear_resync();
        self.clear_fetch_block();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RoverMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RoverMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RoverMessage_Resync {
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl RoverMessage_Resync {
    pub fn new() -> RoverMessage_Resync {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for RoverMessage_Resync {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RoverMessage_Resync {
        RoverMessage_Resync::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<RoverMessage_Resync>(
                    "RoverMessage_Resync",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RoverMessage_Resync {
        static mut instance: ::protobuf::lazy::Lazy<RoverMessage_Resync> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RoverMessage_Resync,
        };
        unsafe {
            instance.get(RoverMessage_Resync::new)
        }
    }
}

impl ::protobuf::Clear for RoverMessage_Resync {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RoverMessage_Resync {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RoverMessage_Resync {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RoverMessage_FetchBlock {
    // message fields
    pub from_block: ::protobuf::SingularPtrField<super::core::Block>,
    pub to_block: ::protobuf::SingularPtrField<super::core::Block>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl RoverMessage_FetchBlock {
    pub fn new() -> RoverMessage_FetchBlock {
        ::std::default::Default::default()
    }

    // .bc.Block from_block = 1;

    pub fn clear_from_block(&mut self) {
        self.from_block.clear();
    }

    pub fn has_from_block(&self) -> bool {
        self.from_block.is_some()
    }

    // Param is passed by value, moved
    pub fn set_from_block(&mut self, v: super::core::Block) {
        self.from_block = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_from_block(&mut self) -> &mut super::core::Block {
        if self.from_block.is_none() {
            self.from_block.set_default();
        }
        self.from_block.as_mut().unwrap()
    }

    // Take field
    pub fn take_from_block(&mut self) -> super::core::Block {
        self.from_block.take().unwrap_or_else(|| super::core::Block::new())
    }

    pub fn get_from_block(&self) -> &super::core::Block {
        self.from_block.as_ref().unwrap_or_else(|| super::core::Block::default_instance())
    }

    // .bc.Block to_block = 2;

    pub fn clear_to_block(&mut self) {
        self.to_block.clear();
    }

    pub fn has_to_block(&self) -> bool {
        self.to_block.is_some()
    }

    // Param is passed by value, moved
    pub fn set_to_block(&mut self, v: super::core::Block) {
        self.to_block = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_to_block(&mut self) -> &mut super::core::Block {
        if self.to_block.is_none() {
            self.to_block.set_default();
        }
        self.to_block.as_mut().unwrap()
    }

    // Take field
    pub fn take_to_block(&mut self) -> super::core::Block {
        self.to_block.take().unwrap_or_else(|| super::core::Block::new())
    }

    pub fn get_to_block(&self) -> &super::core::Block {
        self.to_block.as_ref().unwrap_or_else(|| super::core::Block::default_instance())
    }
}

impl ::protobuf::Message for RoverMessage_FetchBlock {
    fn is_initialized(&self) -> bool {
        for v in &self.from_block {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.to_block {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.from_block)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.to_block)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.from_block.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.to_block.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.from_block.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.to_block.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RoverMessage_FetchBlock {
        RoverMessage_FetchBlock::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::core::Block>>(
                    "from_block",
                    |m: &RoverMessage_FetchBlock| { &m.from_block },
                    |m: &mut RoverMessage_FetchBlock| { &mut m.from_block },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::core::Block>>(
                    "to_block",
                    |m: &RoverMessage_FetchBlock| { &m.to_block },
                    |m: &mut RoverMessage_FetchBlock| { &mut m.to_block },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RoverMessage_FetchBlock>(
                    "RoverMessage_FetchBlock",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RoverMessage_FetchBlock {
        static mut instance: ::protobuf::lazy::Lazy<RoverMessage_FetchBlock> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RoverMessage_FetchBlock,
        };
        unsafe {
            instance.get(RoverMessage_FetchBlock::new)
        }
    }
}

impl ::protobuf::Clear for RoverMessage_FetchBlock {
    fn clear(&mut self) {
        self.clear_from_block();
        self.clear_to_block();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RoverMessage_FetchBlock {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RoverMessage_FetchBlock {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SettleTxCheckReq {
    // message fields
    pub addr_to: ::std::string::String,
    pub addr_from: ::std::string::String,
    pub bridged_chain: ::std::string::String,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl SettleTxCheckReq {
    pub fn new() -> SettleTxCheckReq {
        ::std::default::Default::default()
    }

    // string addr_to = 1;

    pub fn clear_addr_to(&mut self) {
        self.addr_to.clear();
    }

    // Param is passed by value, moved
    pub fn set_addr_to(&mut self, v: ::std::string::String) {
        self.addr_to = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_addr_to(&mut self) -> &mut ::std::string::String {
        &mut self.addr_to
    }

    // Take field
    pub fn take_addr_to(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.addr_to, ::std::string::String::new())
    }

    pub fn get_addr_to(&self) -> &str {
        &self.addr_to
    }

    // string addr_from = 2;

    pub fn clear_addr_from(&mut self) {
        self.addr_from.clear();
    }

    // Param is passed by value, moved
    pub fn set_addr_from(&mut self, v: ::std::string::String) {
        self.addr_from = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_addr_from(&mut self) -> &mut ::std::string::String {
        &mut self.addr_from
    }

    // Take field
    pub fn take_addr_from(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.addr_from, ::std::string::String::new())
    }

    pub fn get_addr_from(&self) -> &str {
        &self.addr_from
    }

    // string bridged_chain = 3;

    pub fn clear_bridged_chain(&mut self) {
        self.bridged_chain.clear();
    }

    // Param is passed by value, moved
    pub fn set_bridged_chain(&mut self, v: ::std::string::String) {
        self.bridged_chain = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bridged_chain(&mut self) -> &mut ::std::string::String {
        &mut self.bridged_chain
    }

    // Take field
    pub fn take_bridged_chain(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bridged_chain, ::std::string::String::new())
    }

    pub fn get_bridged_chain(&self) -> &str {
        &self.bridged_chain
    }
}

impl ::protobuf::Message for SettleTxCheckReq {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.addr_to)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.addr_from)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bridged_chain)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.addr_to.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.addr_to);
        }
        if !self.addr_from.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.addr_from);
        }
        if !self.bridged_chain.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.bridged_chain);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.addr_to.is_empty() {
            os.write_string(1, &self.addr_to)?;
        }
        if !self.addr_from.is_empty() {
            os.write_string(2, &self.addr_from)?;
        }
        if !self.bridged_chain.is_empty() {
            os.write_string(3, &self.bridged_chain)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SettleTxCheckReq {
        SettleTxCheckReq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "addr_to",
                    |m: &SettleTxCheckReq| { &m.addr_to },
                    |m: &mut SettleTxCheckReq| { &mut m.addr_to },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "addr_from",
                    |m: &SettleTxCheckReq| { &m.addr_from },
                    |m: &mut SettleTxCheckReq| { &mut m.addr_from },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "bridged_chain",
                    |m: &SettleTxCheckReq| { &m.bridged_chain },
                    |m: &mut SettleTxCheckReq| { &mut m.bridged_chain },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SettleTxCheckReq>(
                    "SettleTxCheckReq",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SettleTxCheckReq {
        static mut instance: ::protobuf::lazy::Lazy<SettleTxCheckReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SettleTxCheckReq,
        };
        unsafe {
            instance.get(SettleTxCheckReq::new)
        }
    }
}

impl ::protobuf::Clear for SettleTxCheckReq {
    fn clear(&mut self) {
        self.clear_addr_to();
        self.clear_addr_from();
        self.clear_bridged_chain();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SettleTxCheckReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SettleTxCheckReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SettleTxCheckResponse {
    // message fields
    pub is_before_settlement_height: bool,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl SettleTxCheckResponse {
    pub fn new() -> SettleTxCheckResponse {
        ::std::default::Default::default()
    }

    // bool is_before_settlement_height = 1;

    pub fn clear_is_before_settlement_height(&mut self) {
        self.is_before_settlement_height = false;
    }

    // Param is passed by value, moved
    pub fn set_is_before_settlement_height(&mut self, v: bool) {
        self.is_before_settlement_height = v;
    }

    pub fn get_is_before_settlement_height(&self) -> bool {
        self.is_before_settlement_height
    }
}

impl ::protobuf::Message for SettleTxCheckResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_before_settlement_height = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.is_before_settlement_height != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.is_before_settlement_height != false {
            os.write_bool(1, self.is_before_settlement_height)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SettleTxCheckResponse {
        SettleTxCheckResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "is_before_settlement_height",
                    |m: &SettleTxCheckResponse| { &m.is_before_settlement_height },
                    |m: &mut SettleTxCheckResponse| { &mut m.is_before_settlement_height },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SettleTxCheckResponse>(
                    "SettleTxCheckResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SettleTxCheckResponse {
        static mut instance: ::protobuf::lazy::Lazy<SettleTxCheckResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SettleTxCheckResponse,
        };
        unsafe {
            instance.get(SettleTxCheckResponse::new)
        }
    }
}

impl ::protobuf::Clear for SettleTxCheckResponse {
    fn clear(&mut self) {
        self.clear_is_before_settlement_height();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SettleTxCheckResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SettleTxCheckResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum RoverMessageType {
    FetchBlock = 0,
    RequestResync = 1,
}

impl ::protobuf::ProtobufEnum for RoverMessageType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<RoverMessageType> {
        match value {
            0 => ::std::option::Option::Some(RoverMessageType::FetchBlock),
            1 => ::std::option::Option::Some(RoverMessageType::RequestResync),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [RoverMessageType] = &[
            RoverMessageType::FetchBlock,
            RoverMessageType::RequestResync,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("RoverMessageType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for RoverMessageType {
}

impl ::std::default::Default for RoverMessageType {
    fn default() -> Self {
        RoverMessageType::FetchBlock
    }
}

impl ::protobuf::reflect::ProtobufValue for RoverMessageType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0brover.proto\x12\x02bc\x1a\ncore.proto\"+\n\nRoverIdent\x12\x1d\n\n\
    rover_name\x18\x01\x20\x01(\tR\troverName\"\x9e\x02\n\x0cRoverMessage\
    \x12(\n\x04type\x18\x01\x20\x01(\x0e2\x14.bc.RoverMessageTypeR\x04type\
    \x121\n\x06resync\x18\x02\x20\x01(\x0b2\x17.bc.RoverMessage.ResyncH\0R\
    \x06resync\x12>\n\x0bfetch_block\x18\x03\x20\x01(\x0b2\x1b.bc.RoverMessa\
    ge.FetchBlockH\0R\nfetchBlock\x1a\x08\n\x06Resync\x1a\\\n\nFetchBlock\
    \x12(\n\nfrom_block\x18\x01\x20\x01(\x0b2\t.bc.BlockR\tfromBlock\x12$\n\
    \x08to_block\x18\x02\x20\x01(\x0b2\t.bc.BlockR\x07toBlockB\t\n\x07payloa\
    d\"m\n\x10SettleTxCheckReq\x12\x17\n\x07addr_to\x18\x01\x20\x01(\tR\x06a\
    ddrTo\x12\x1b\n\taddr_from\x18\x02\x20\x01(\tR\x08addrFrom\x12#\n\rbridg\
    ed_chain\x18\x03\x20\x01(\tR\x0cbridgedChain\"V\n\x15SettleTxCheckRespon\
    se\x12=\n\x1bis_before_settlement_height\x18\x01\x20\x01(\x08R\x18isBefo\
    reSettlementHeight*5\n\x10RoverMessageType\x12\x0e\n\nFetchBlock\x10\0\
    \x12\x11\n\rRequestResync\x10\x012\xa7\x01\n\x05Rover\x12,\n\x04Join\x12\
    \x0e.bc.RoverIdent\x1a\x10.bc.RoverMessage\"\00\x01\x12%\n\x0cCollectBlo\
    ck\x12\t.bc.Block\x1a\x08.bc.Null\"\0\x12I\n\x14IsBeforeSettleHeight\x12\
    \x14.bc.SettleTxCheckReq\x1a\x19.bc.SettleTxCheckResponse\"\0b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
