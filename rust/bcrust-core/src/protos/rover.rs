// This file is generated by rust-protobuf 2.0.4. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct RoverIdent {
    // message fields
    pub rover_name: ::std::string::String,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl RoverIdent {
    pub fn new() -> RoverIdent {
        ::std::default::Default::default()
    }

    // string rover_name = 1;

    pub fn clear_rover_name(&mut self) {
        self.rover_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_rover_name(&mut self, v: ::std::string::String) {
        self.rover_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rover_name(&mut self) -> &mut ::std::string::String {
        &mut self.rover_name
    }

    // Take field
    pub fn take_rover_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rover_name, ::std::string::String::new())
    }

    pub fn get_rover_name(&self) -> &str {
        &self.rover_name
    }
}

impl ::protobuf::Message for RoverIdent {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rover_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.rover_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.rover_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.rover_name.is_empty() {
            os.write_string(1, &self.rover_name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RoverIdent {
        RoverIdent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "rover_name",
                    |m: &RoverIdent| { &m.rover_name },
                    |m: &mut RoverIdent| { &mut m.rover_name },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RoverIdent>(
                    "RoverIdent",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RoverIdent {
        static mut instance: ::protobuf::lazy::Lazy<RoverIdent> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RoverIdent,
        };
        unsafe {
            instance.get(RoverIdent::new)
        }
    }
}

impl ::protobuf::Clear for RoverIdent {
    fn clear(&mut self) {
        self.clear_rover_name();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RoverIdent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RoverIdent {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SettleTxCheckReq {
    // message fields
    pub addr_to: ::std::string::String,
    pub addr_from: ::std::string::String,
    pub bridged_chain: ::std::string::String,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl SettleTxCheckReq {
    pub fn new() -> SettleTxCheckReq {
        ::std::default::Default::default()
    }

    // string addr_to = 1;

    pub fn clear_addr_to(&mut self) {
        self.addr_to.clear();
    }

    // Param is passed by value, moved
    pub fn set_addr_to(&mut self, v: ::std::string::String) {
        self.addr_to = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_addr_to(&mut self) -> &mut ::std::string::String {
        &mut self.addr_to
    }

    // Take field
    pub fn take_addr_to(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.addr_to, ::std::string::String::new())
    }

    pub fn get_addr_to(&self) -> &str {
        &self.addr_to
    }

    // string addr_from = 2;

    pub fn clear_addr_from(&mut self) {
        self.addr_from.clear();
    }

    // Param is passed by value, moved
    pub fn set_addr_from(&mut self, v: ::std::string::String) {
        self.addr_from = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_addr_from(&mut self) -> &mut ::std::string::String {
        &mut self.addr_from
    }

    // Take field
    pub fn take_addr_from(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.addr_from, ::std::string::String::new())
    }

    pub fn get_addr_from(&self) -> &str {
        &self.addr_from
    }

    // string bridged_chain = 3;

    pub fn clear_bridged_chain(&mut self) {
        self.bridged_chain.clear();
    }

    // Param is passed by value, moved
    pub fn set_bridged_chain(&mut self, v: ::std::string::String) {
        self.bridged_chain = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bridged_chain(&mut self) -> &mut ::std::string::String {
        &mut self.bridged_chain
    }

    // Take field
    pub fn take_bridged_chain(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bridged_chain, ::std::string::String::new())
    }

    pub fn get_bridged_chain(&self) -> &str {
        &self.bridged_chain
    }
}

impl ::protobuf::Message for SettleTxCheckReq {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.addr_to)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.addr_from)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bridged_chain)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.addr_to.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.addr_to);
        }
        if !self.addr_from.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.addr_from);
        }
        if !self.bridged_chain.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.bridged_chain);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.addr_to.is_empty() {
            os.write_string(1, &self.addr_to)?;
        }
        if !self.addr_from.is_empty() {
            os.write_string(2, &self.addr_from)?;
        }
        if !self.bridged_chain.is_empty() {
            os.write_string(3, &self.bridged_chain)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SettleTxCheckReq {
        SettleTxCheckReq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "addr_to",
                    |m: &SettleTxCheckReq| { &m.addr_to },
                    |m: &mut SettleTxCheckReq| { &mut m.addr_to },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "addr_from",
                    |m: &SettleTxCheckReq| { &m.addr_from },
                    |m: &mut SettleTxCheckReq| { &mut m.addr_from },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "bridged_chain",
                    |m: &SettleTxCheckReq| { &m.bridged_chain },
                    |m: &mut SettleTxCheckReq| { &mut m.bridged_chain },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SettleTxCheckReq>(
                    "SettleTxCheckReq",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SettleTxCheckReq {
        static mut instance: ::protobuf::lazy::Lazy<SettleTxCheckReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SettleTxCheckReq,
        };
        unsafe {
            instance.get(SettleTxCheckReq::new)
        }
    }
}

impl ::protobuf::Clear for SettleTxCheckReq {
    fn clear(&mut self) {
        self.clear_addr_to();
        self.clear_addr_from();
        self.clear_bridged_chain();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SettleTxCheckReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SettleTxCheckReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SettleTxCheckResponse {
    // message fields
    pub is_before_settlement_height: bool,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl SettleTxCheckResponse {
    pub fn new() -> SettleTxCheckResponse {
        ::std::default::Default::default()
    }

    // bool is_before_settlement_height = 1;

    pub fn clear_is_before_settlement_height(&mut self) {
        self.is_before_settlement_height = false;
    }

    // Param is passed by value, moved
    pub fn set_is_before_settlement_height(&mut self, v: bool) {
        self.is_before_settlement_height = v;
    }

    pub fn get_is_before_settlement_height(&self) -> bool {
        self.is_before_settlement_height
    }
}

impl ::protobuf::Message for SettleTxCheckResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_before_settlement_height = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.is_before_settlement_height != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.is_before_settlement_height != false {
            os.write_bool(1, self.is_before_settlement_height)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SettleTxCheckResponse {
        SettleTxCheckResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "is_before_settlement_height",
                    |m: &SettleTxCheckResponse| { &m.is_before_settlement_height },
                    |m: &mut SettleTxCheckResponse| { &mut m.is_before_settlement_height },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SettleTxCheckResponse>(
                    "SettleTxCheckResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SettleTxCheckResponse {
        static mut instance: ::protobuf::lazy::Lazy<SettleTxCheckResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SettleTxCheckResponse,
        };
        unsafe {
            instance.get(SettleTxCheckResponse::new)
        }
    }
}

impl ::protobuf::Clear for SettleTxCheckResponse {
    fn clear(&mut self) {
        self.clear_is_before_settlement_height();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SettleTxCheckResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SettleTxCheckResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0brover.proto\x12\x02bc\x1a\ncore.proto\"+\n\nRoverIdent\x12\x1d\n\n\
    rover_name\x18\x01\x20\x01(\tR\troverName\"m\n\x10SettleTxCheckReq\x12\
    \x17\n\x07addr_to\x18\x01\x20\x01(\tR\x06addrTo\x12\x1b\n\taddr_from\x18\
    \x02\x20\x01(\tR\x08addrFrom\x12#\n\rbridged_chain\x18\x03\x20\x01(\tR\
    \x0cbridgedChain\"V\n\x15SettleTxCheckResponse\x12=\n\x1bis_before_settl\
    ement_height\x18\x01\x20\x01(\x08R\x18isBeforeSettlementHeight2\xa7\x01\
    \n\x05Rover\x12,\n\x04Join\x12\x0e.bc.RoverIdent\x1a\x0e.bc.RoverIdent\"\
    \0(\x010\x01\x12%\n\x0cCollectBlock\x12\t.bc.Block\x1a\x08.bc.Null\"\0\
    \x12I\n\x14IsBeforeSettleHeight\x12\x14.bc.SettleTxCheckReq\x1a\x19.bc.S\
    ettleTxCheckResponse\"\0b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
